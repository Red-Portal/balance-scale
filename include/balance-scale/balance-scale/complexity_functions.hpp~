#ifndef _COMPLEXITY_FUNCTIONS_
#define _COMPLEXITY_FUNCTIONS_

#include <vector>
#include <functional>
#include <cmath>

namespace balance
{
    enum class complexity{constant, linear, square, log, nlogn};

    constexpr std::vector<std::function<double(int, int)>> complexity_functions(
        [](int k, int N) -> double
        {
            return 1; 
        },

        [](int k, int N) -> double
        {
            return k; 
        },

        [](int k, int N) -> double
        {
            return k * k; 
        },

        [](int k, int N) -> double
        {
            double k_f = static_cast<double>(k);
            double N_f = static_cast<double>(N);
            return 1 + std::log10(k) / std::log10(N); 
        },

        [](int k, int N) -> double
        {
            double k_f = static_cast<double>(k);
            double N_f = static_cast<double>(N);
            return k * (1 + std::log10(k) / std::log10(N)); 
        });
}

#endif
